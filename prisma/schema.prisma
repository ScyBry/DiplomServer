generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  email    String  @unique
  password String
  isAdmin  Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Department {
  id       String  @id @default(uuid())
  name     String  @unique
  location String
  groups   Group[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("departments")
}

model Teacher {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  surname    String
  fullName   String
  totalHours Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  subjects TeacherSubject[] @relation(name: "TeacherSubjectRelation")

  @@map("teachers")
}

model Subject {
  id            String @unique @default(uuid())
  name          String
  hoursPerGroup Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teachers        TeacherSubject[]  @relation(name: "TeacherSubjectRelation")
  Group           Group?            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         String?
  ScheduleSubject ScheduleSubject[]

  @@map("subjects")
}

model TeacherSubject {
  teacher   Teacher @relation(fields: [teacherId], references: [id], name: "TeacherSubjectRelation", onDelete: Cascade)
  teacherId String
  subject   Subject @relation(fields: [subjectId], references: [id], name: "TeacherSubjectRelation", onDelete: Cascade)
  subjectId String

  @@id([teacherId, subjectId])
}

model Group {
  id           String        @id @default(uuid())
  name         String        @unique
  Department   Department?   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?
  subjects     Subject[]
  daySchedules DaySchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("groups")
}

model ScheduleSubject {
  id                     String                   @id @default(uuid())
  orderNumber            Int
  subject                Subject?                 @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId              String?
  DaySchedule            DaySchedule?             @relation(fields: [dayScheduleId], references: [id], onDelete: Cascade)
  dayScheduleId          String?
  ScheduleSubjectCabinet ScheduleSubjectCabinet[]

  @@map("scheduleSubjects")
}

model Cabinet {
  id               String                   @id @default(uuid())
  roomNumber       String                   @unique
  location         String
  scheduleSubjects ScheduleSubjectCabinet[]

  @@map("cabinets")
}

model ScheduleSubjectCabinet {
  scheduleSubject   ScheduleSubject @relation(fields: [scheduleSubjectId], references: [id], onDelete: Cascade)
  scheduleSubjectId String
  cabinet           Cabinet         @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  cabinetId         String

  @@id([scheduleSubjectId, cabinetId])
}

model DaySchedule {
  id               String            @id @default(uuid())
  dayOfWeek        String
  Group            Group?            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId          String
  scheduleSubjects ScheduleSubject[]
  lastConfirm      DateTime          @default(now()) @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@map("daySchedule")
}
